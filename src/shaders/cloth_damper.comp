#version 450
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_atomic_float : enable

struct Particle {
    vec4 velocity;
    vec4 force;
};

struct SpringDamper {
    ivec2 pair;
	float restLength;
};

layout(push_constant) uniform PerFrameDeltaTime {
	float t;
} deltaT;

layout (set = 0, binding = 0) uniform ClothUBO {
    float particleMass;
    float springK;
    float damperK;
} clothUBO;

layout(std140, set = 0, binding = 1) buffer SpringDampersSSBO {
    SpringDamper springDampers[];
};

layout(std430, set = 0, binding = 2) buffer ParticleStateSSBO {
   Particle particleStates[];
};

layout(std140, set = 0, binding = 3) buffer ParticlePosSSBO {
	vec4 particlePos[];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void applyForce(int p, vec4 force);

void main() {
    uint i = gl_GlobalInvocationID.x;
    int p1 = springDampers[i].pair.x, p2 = springDampers[i].pair.y;
	//debugPrintfEXT("cmp0 id:%u, x: %d, y: %d",i, p1, p2);

    vec4 e = particlePos[p2] - particlePos[p1];
    float l = length(e);
    vec4 closingDir = normalize(e);
    float vClose = dot((particleStates[p1].velocity - particleStates[p2].velocity), closingDir);
    vec4 force = closingDir * (-1.0 * clothUBO.springK * (springDampers[i].restLength - l) - clothUBO.damperK * vClose);
	//debugPrintfEXT("cmp1: %u pos1: %v4f pos2: %v4f force: %v4f length: %f", i, particlePos[p1], particlePos[p2], force, l);

	applyForce(p1, force);
	applyForce(p2, -force);
}

void applyForce(int p, vec4 force) {
    //particleStates[p].force += force; //not atomic
	atomicAdd(particleStates[p].force.x, force.x);
	atomicAdd(particleStates[p].force.y, force.y);
	atomicAdd(particleStates[p].force.z, force.z);
}
